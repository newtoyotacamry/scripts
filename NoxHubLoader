-- before calling this loader you do:
--    userKey = "Jg2XitZ265dIJ1EdfQrI7ubz"
--    auto    = "false"   -- or "true"
--    loadstring(game:HttpGet("https://raw.githubusercontent.com/newtoyotacamry/scripts/refs/heads/main/NoxHubLoader"))()

-- ▶︎ SERVICES & CONFIG
local HttpService   = game:GetService("HttpService")
local Analytics     = game:GetService("RbxAnalyticsService")
local SECRET_KEY    = "efea913cc33b085341e2cda7d8c07f4fb2f9be57e820aeb5269745ba1c8001ec"
local BASE_URL      = "https://roblox-licensing-1.onrender.com"
local CHALLENGE_URL = BASE_URL .. "/loader/challenge"
local VALIDATE_URL  = BASE_URL .. "/loader/validate"

-- ▶︎ READ GLOBALS & PRECHECK
if type(userKey) ~= "string" or userKey == "" then
    error("❌ No userKey found – set `userKey = \"...\"` before loading.")
end
-- coerce auto flag (accepts boolean or string "true"/"false")
local autoFlag = (auto == true) or (auto == "true")

-- ▶︎ UNIFY HTTP REQUEST
local http_request = (syn and syn.request)
                  or (http and http.request)
                  or request
                  or http_request

if not http_request then
    error("❌ No supported HTTP request function found; your executor may not allow HTTP")
end

-- ▶︎ HELPERS
local function simpleHMAC(input, key)
    return HttpService:UrlEncode(input .. key)
end

local function fetch(url, method, body)
    local ok, res = pcall(http_request, {
        Url     = url,
        Method  = method,
        Headers = { ["Content-Type"] = "application/json" },
        Body    = body or ""
    })
    if not ok then
        error("❌ HTTP request failed: " .. tostring(res))
    end
    return (res.Body or res)
end

local function safeDecode(raw)
    local ok, dec = pcall(HttpService.JSONDecode, HttpService, raw)
    return ok and dec or nil, ok and nil or dec
end

-- ▶︎ GATHER METADATA
local hwid   = tostring(Analytics:GetClientId())
local gameId = tostring(game.GameId)

-- ▶︎ CHALLENGE STEP
local challRaw = fetch(CHALLENGE_URL, "POST", "")
local chall, err = safeDecode(challRaw)
if not chall or type(chall.nonce) ~= "string" then
    error("❌ Invalid challenge response")
end

-- ▶︎ SIGNATURE & VALIDATE
local ts        = tostring(os.time())
local tokenData = chall.nonce .. ":" .. ts .. ":" .. userKey
local clientSig = simpleHMAC(tokenData, SECRET_KEY)

local payload = {
    key       = userKey,
    hwid      = hwid,
    gameId    = gameId,
    nonce     = chall.nonce,
    timestamp = ts,
    sig       = clientSig,
    auto      = autoFlag
}

local validateRaw = fetch(VALIDATE_URL, "POST", HttpService:JSONEncode(payload))
local resp, respErr = safeDecode(validateRaw)
if not resp then
    error("❌ Invalid validate response: " .. tostring(respErr))
end
if type(resp.code) ~= "string" then
    error("❌ No script code returned.")
end
if type(resp.session) ~= "string" then
    error("❌ No session returned.")
end

-- ▶︎ LAUNCH THE SCRIPT
_G._session = {
    token = resp.session,
    key   = userKey,
    hwid  = hwid,
}
local fn, loadErr = loadstring(resp.code)
if not fn then
    error("❌ loadstring failed: " .. tostring(loadErr))
end
fn()
