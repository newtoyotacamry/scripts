-- ▶︎ CONFIGURE THIS:
local userKey = (function()
    -- try file:
    if isfile and readfile and isfile("NoxHub/key.txt") then
        return readfile("NoxHub/key.txt"):gsub("%s+", "")
    end
    -- or hard-code:
    -- return "YOUR-LICENSE-KEY-HERE"
end)()
if not userKey or userKey == "" then
    error("❌ No userKey found")
end

-- ▶︎ SETUP SERVICES & ALIASES:
local HttpService = game:GetService("HttpService")
local Analytics   = game:GetService("RbxAnalyticsService")

-- unify HTTP request fn:
local http_request = (syn and syn.request)
                  or (http and http.request)
                  or request
                  or http_request
if not http_request then
    error("❌ No supported HTTP request function found")
end

-- ▶︎ FETCH UTILS:
local function fetch(url, method, body)
    local ok, res = pcall(http_request, {
        Url     = url,
        Method  = method,
        Headers = {["Content-Type"]="application/json"},
        Body    = body or ""
    })
    if not ok then error("❌ HTTP request failed") end
    return (res.Body or res)
end

local function safeDecode(raw)
    local ok, dec = pcall(HttpService.JSONDecode, HttpService, raw)
    return ok and dec or nil, ok and nil or dec
end

-- ▶︎ GATHER ID DATA:
local hwid   = tostring(Analytics:GetClientId())
local gameId = tostring(game.GameId)

-- ▶︎ CHALLENGE:
local challRaw = fetch("https://roblox-licensing-1.onrender.com/loader/challenge", "POST", "")
local chall, err = safeDecode(challRaw)
if not chall or type(chall.nonce) ~= "string" then
    error("❌ Invalid challenge response")
end

-- ▶︎ SIGN & VALIDATE:
local ts        = tostring(os.time())
local tokenData = chall.nonce..":"..ts..":"..userKey
local clientSig = HttpService:UrlEncode(tokenData.."efea913cc33b085341e2cda7d8c07f4fb2f9be57e820aeb5269745ba1c8001ec")  -- replace with your SECRET_KEY

local validateBody = HttpService:JSONEncode({
    key       = userKey,
    hwid      = hwid,
    gameId    = gameId,
    nonce     = chall.nonce,
    timestamp = ts,
    sig       = clientSig,
})

local validateRaw = fetch("https://roblox-licensing-1.onrender.com/loader/validate", "POST", validateBody)
local resp, respErr = safeDecode(validateRaw)
if not resp then
    error("❌ Invalid validate response: "..tostring(respErr))
end
if type(resp.code) ~= "string" or type(resp.session) ~= "string" then
    error("❌ Validation failed")
end

-- ▶︎ INSTALL SESSION & LAUNCH:
_G._session = { token = resp.session, key = userKey, hwid = hwid }
local fn, loadErr = loadstring(resp.code)
if not fn then error("❌ loadstring failed: "..tostring(loadErr)) end
fn()
